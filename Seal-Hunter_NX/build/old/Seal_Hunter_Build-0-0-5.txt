/*  Nintendo Switch homebrew projects 
    by Kenneth van der Maazen (c) 2024

    Seal Hunter is a free 2D shoot 'em up game for the Nintendo Switch.
    Using a wide range of weapons, players must prevent harmful sea creatures, ranging from seals to polar bears, from reaching the ocean to ensure a good catch.

    Date created:   07-11-2024
    Last updated:   07-11-2024 @ 13:22

    Build:  0.0.1
        Character static png displays on screen.
        Background set to black.
        Character animation and movement implemented.

    Build:  0.0.2
        Character now holds starting pistol (USP).
        Crosshair added with offset: 130 pixels left from character.

    Build:  0.0.3
        Include vector library.
        Added backdrop png of an iceberg.
        Added background png of the ice layer's reflection.
        Changed some values where the character holds the gun wrong in y position, crosshair adjusted and background playable area is set with borders.

    Build:  0.0.4
        Include SDL_ttf library for displaying texts.
        Added score by $ count in top right corner.
        Added a kill counter in top right corner.
        Added HUD image on top of the screen.
        Repositioned player sprite to the right side of the screen, in the middle of the ice vertically.

*/

#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <vector>

#include <switch.h>
#include <SDL2/SDL.h>
#include <SDL2/SDL_image.h>
#include <SDL2/SDL_ttf.h>

using namespace std;

const int SCREEN_WIDTH = 1280;
const int SCREEN_HEIGHT = 720;
const int PLAYER_SPEED = 2;     // Snelheid van de speler
const int ANIMATION_DELAY = 10; // Aantal frames tussen animatiewisselingen

const int maxBullets_Pistol = 12;


/* GLOBALE VARIABELEN */
bool quit = false;

int score = 0;
int kills = 0;

TTF_Font* font = NULL;  // Font voor tekstweergave

// Speler
struct Player {
    int x, y;               // Positie van de speler
    int width, height;      // Grootte van de speler
    bool moving;            // Beweegt de speler op dit moment?
    int frame;              // Huidige frame van de animatie
    int frameCounter;       // Teller voor animatiewisseling
    SDL_Texture* idleTexture;       // Statische sprite van de speler
    SDL_Texture* walkTexture1;      // Eerste frame van de loopanimatie
    SDL_Texture* walkTexture2;      // Tweede frame van de loopanimatie
    SDL_Texture* weaponTexture;     // Wapen van de speler
    SDL_Texture* crosshairTexture;  // Crosshair icoon links van de speler
};

Player player;
SDL_Texture* backdropTexture = NULL;    // Achtergrond afbeelding
SDL_Texture* iceTexture = NULL;         // Ijslaag afbeelding
SDL_Texture* hudTexture = NULL;         // HUD afbeelding


// Functie om de speler te initialiseren
void initPlayer(SDL_Renderer* renderer) {
    player.x = SCREEN_WIDTH - player.width - 80;    // Plaats de speler aan de rechterkant, 20 pixels van de rand.
    player.y = (SCREEN_HEIGHT / 2) + 80;            // Plaats de speler verticaal in het midden van het ijs.

    player.width = 24;          // Stel de breedte van de speler in
    player.height = 40;         // Stel de hoogte van de speler in
    player.moving = false;      // De speler beweegt niet op het moment van initialisatie
    player.frame = 0;           // Start met de eerste frame van de animatie
    player.frameCounter = 0;    // Reset de framecounter

    // Laad de statische sprite
    SDL_Surface* tempSurface = IMG_Load("romfs:/Assets/Player1/Stopped/anim.png");
    player.idleTexture = SDL_CreateTextureFromSurface(renderer, tempSurface);
    SDL_FreeSurface(tempSurface);

    // Laad het eerste loopframe
    tempSurface = IMG_Load("romfs:/Assets/Player1/Walking/anim_1.png");
    player.walkTexture1 = SDL_CreateTextureFromSurface(renderer, tempSurface);
    SDL_FreeSurface(tempSurface);

    // Laad het tweede loopframe
    tempSurface = IMG_Load("romfs:/Assets/Player1/Walking/anim_2.png");
    player.walkTexture2 = SDL_CreateTextureFromSurface(renderer, tempSurface);
    SDL_FreeSurface(tempSurface);

    // Laad de score in $ 


    // Laad het pistol wapen
    tempSurface = IMG_Load("romfs:/Assets/Weapons/Hands/Blue/USP/usp.png");
    player.weaponTexture = SDL_CreateTextureFromSurface(renderer, tempSurface);
    SDL_FreeSurface(tempSurface);

    // Laad de crosshair-afbeelding
    tempSurface = IMG_Load("romfs:/Assets/Misc/blue_crosshair_1.png");
    player.crosshairTexture = SDL_CreateTextureFromSurface(renderer, tempSurface);
    SDL_FreeSurface(tempSurface);
}

// Functie om de achtergrond en ijslaag te initialiseren
void initBackdropAndIce(SDL_Renderer* renderer) {
    SDL_Surface* tempSurface = IMG_Load("romfs:/Assets/Misc/backdrop.png"); // Laad de achtergrond
    backdropTexture = SDL_CreateTextureFromSurface(renderer, tempSurface);
    SDL_FreeSurface(tempSurface);

    tempSurface = IMG_Load("romfs:/Assets/Misc/ice.png");   // Laad de ijslaag
    iceTexture = SDL_CreateTextureFromSurface(renderer, tempSurface);
    SDL_FreeSurface(tempSurface);
}

// Functie om de HUD-afbeelding te laden
void initHUD(SDL_Renderer* renderer) {
    SDL_Surface* tempSurface = IMG_Load("romfs:/Assets/Misc/blueHUD.png");
    if (!tempSurface) {
        cerr << "ERROR_ " << IMG_GetError() << endl;
        quit = true;
        return;
    }
    hudTexture = SDL_CreateTextureFromSurface(renderer, tempSurface);
    SDL_FreeSurface(tempSurface);
}

void renderHUD(SDL_Renderer* renderer) {
    SDL_Rect hudRect = { 0, 0, SCREEN_WIDTH, 122 };  // Plaats bovenaan met de hoogte van de HUD afbeelding
    SDL_RenderCopy(renderer, hudTexture, NULL, &hudRect);
}

// Functie om tekst te renderen
void renderText(SDL_Renderer* renderer, const char* text, TTF_Font *font, int x, int y) {
    SDL_Color white = { 255, 255, 255 }; // Wit van kleur
    //SDL_Color black = { 0, 0, 0 }; // Zwart van kleur
    SDL_Surface* surfaceMessage = TTF_RenderText_Solid(font, text, white);
    SDL_Texture* message = SDL_CreateTextureFromSurface(renderer, surfaceMessage);

    SDL_Rect messageRect;
    messageRect.x = x;
    messageRect.y = y;
    messageRect.w = surfaceMessage->w;
    messageRect.h = surfaceMessage->h;

    // Render de teskt op het scherm
    SDL_RenderCopy(renderer, message, NULL, &messageRect);

    // Opruimen
    SDL_DestroyTexture(message);
    SDL_FreeSurface(surfaceMessage);
}

// Functie om de achtergrond en ijslaag te renderen
void renderBackdropAndIce(SDL_Renderer* renderer) {
    // Render de achtergrond
    SDL_Rect backdropRect = { 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT };
    SDL_RenderCopy(renderer, backdropTexture, NULL, &backdropRect);

    // Render de ijslaag bovenop de achtergrond
    SDL_Rect iceRect = { 0, SCREEN_HEIGHT - 590, SCREEN_WIDTH, SCREEN_HEIGHT - 100 };   // Plaats de ijslaag onderaan het scherm
    SDL_RenderCopy(renderer, iceTexture, NULL, &iceRect);
}

// Functie om de speler te renderen
void renderPlayer(SDL_Renderer* renderer) {
    SDL_Rect destRect = { player.x, player.y, player.width, player.height };
    SDL_Texture* currentTexture = player.idleTexture;

    if (player.moving) {
        // Wissel tussen de twee animatieframes
        if (player.frame == 0) {
            currentTexture = player.walkTexture1;
        } else {
            currentTexture = player.walkTexture2;
        }
    }

    // Render de speler
    SDL_RenderCopy(renderer, currentTexture, NULL, &destRect);

    // Render het wapen links van de speler
    SDL_Rect weaponRect = { player.x - 10, player.y + 17, 34, 10 }; // Pas de offset en grootte aan van het wapen
    SDL_RenderCopy(renderer, player.weaponTexture, NULL, &weaponRect);

    // Render de crosshair links van de speler
    SDL_Rect crosshairRect = { player.x - 100, player.y + 15, 16, 16 }; // Pas de offset en grootte aan van de crosshair
    SDL_RenderCopy(renderer, player.crosshairTexture, NULL, &crosshairRect);
}

// Functie om de speler te verplaatsen op basis van invoer
void handlePlayerMovement(PadState* pad) {
    u64 kHeld = padGetButtons(pad);
    player.moving = false;

    if (kHeld & HidNpadButton_Up) {
        player.y -= PLAYER_SPEED;
        player.moving = true;
    }
    if (kHeld & HidNpadButton_Down) {
        player.y += PLAYER_SPEED;
        player.moving = true;
    }
    if (kHeld & HidNpadButton_Left) {
        player.x -= PLAYER_SPEED;
        player.moving = true;
    }
    if (kHeld & HidNpadButton_Right) {
        player.x += PLAYER_SPEED;
        player.moving = true;
    }

    // Zorg ervoor dat de speler binnen het scherm blijft
    if (player.x < 0) player.x = 0;
    if (player.y < SCREEN_HEIGHT - 430) player.y = SCREEN_HEIGHT - 430; // Blijf op de ijslaag
    if (player.x > SCREEN_WIDTH - player.width) player.x = SCREEN_WIDTH - player.width;
    if (player.y > SCREEN_HEIGHT - 90) player.y = SCREEN_HEIGHT - 90;

    // Update de animatie alleen als de speler beweegt
    if (player.moving) {
        player.frameCounter++;
        if (player.frameCounter >= ANIMATION_DELAY) {
            player.frame = (player.frame + 1) % 2;  // Wissel tussen 0 en 1
            player.frameCounter = 0;
        }
    } else {
        player.frame = 0; // Reset naar de eerste frame
    }
}

// Functie om evenementen te verwerken
void handleEvents(PadState* pad) {
    u64 kDown = padGetButtonsDown(pad); // Knop die net ingedrukt is.
    if (kDown & HidNpadButton_Minus) {
        // Exit game
        quit = true;
    }


    SDL_Event event;
    while (SDL_PollEvent(&event)) {
        if (event.type == SDL_QUIT) {
            quit = true;
        }
    }

    handlePlayerMovement(pad);
}

// Main applicatie entrypoint
int main(int argc, char* argv[]) {
    romfsInit();
    chdir("romfs:/");

    // Configureer de controller invoer
    padConfigureInput(1, HidNpadStyleSet_NpadStandard);
    PadState pad;
    padInitializeDefault(&pad);


    SDL_Init(SDL_INIT_VIDEO);
    IMG_Init(IMG_INIT_PNG);
    TTF_Init();

    // Laad een font
    TTF_Font *font = TTF_OpenFont("romfs:/fonts/vera.ttf", 26);


    SDL_Window* window = SDL_CreateWindow("Seal Hunter", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN);
    SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);


    // Initialiseer de speler
    initPlayer(renderer);
    initBackdropAndIce(renderer);
    initHUD(renderer);

    if (quit) {
        // Als er een fout is opgetreden tijdens de initialisatie van de speler
        SDL_DestroyRenderer(renderer);
        SDL_DestroyWindow(window);
        TTF_Quit();
        IMG_Quit();
        SDL_Quit();
        romfsExit();
        return -1;
    }

    // GAME LOOP (Main)
    while (!quit) {
        // Verwerk de controller invoer
        padUpdate(&pad);
        handleEvents(&pad);

        // Wis het scherm
        SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255); // Zwarte achtergrond
        SDL_RenderClear(renderer);

        renderBackdropAndIce(renderer); // Render de achtergrond en ijslaag
        renderHUD(renderer);
        renderPlayer(renderer);         // Render de speler

        string scoreText = "$          " + to_string(score);
        renderText(renderer, scoreText.c_str(), font, SCREEN_WIDTH - 160, 50);

        // Tekst voor aantal gemaakte kills, onder de score
        string killsText = "Kills:      " + to_string(kills);
        renderText(renderer, killsText.c_str(), font, SCREEN_WIDTH - 160, 75);

        // Update het scherm
        SDL_RenderPresent(renderer);
    }

    // Code Opruimen
    SDL_DestroyTexture(player.idleTexture);
    SDL_DestroyTexture(player.walkTexture1);
    SDL_DestroyTexture(player.walkTexture2);
    SDL_DestroyTexture(player.weaponTexture);
    SDL_DestroyTexture(player.crosshairTexture);
    SDL_DestroyTexture(backdropTexture);
    SDL_DestroyTexture(iceTexture);
    SDL_DestroyTexture(hudTexture);
    TTF_CloseFont(font);
    
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);

    IMG_Quit();
    TTF_Quit();
    SDL_Quit();

    romfsExit();
    return 0;
}
